Rust scan
The Modern Port Scanner. Find ports quickly (3 seconds at its fastest). Run scripts through our scripting engine (Python, Lua, Shell supported).
  
âœ¨ Features
Scans all 65k ports in 3 seconds.
Full scripting engine support. Automatically pipe results into Nmap, or use our scripts (or write your own) to do whatever you want.
Adaptive learning. RustScan improves the more you use it. No bloated machine learning here, just basic maths.
The usuals you would expect. IPv6, CIDR, file input and more.
Automatically pipes ports into Nmap.

USAGE:
    rustscan [FLAGS] [OPTIONS] [-- <command>...]

FLAGS:
        --accessible    Accessible mode. Turns off features which negatively affect screen readers
    -g, --greppable     Greppable mode. Only output the ports. No Nmap. Useful for grep or outputting to a file
    -h, --help          Prints help information
    -n, --no-config     Whether to ignore the configuration file or not
        --top           Use the top 1000 ports
    -V, --version       Prints version information

OPTIONS:
    -a, --addresses <addresses>...    A list of comma separated CIDRs, IPs, or hosts to be scanned
    -b, --batch-size <batch-size>     The batch size for port scanning, it increases or slows the speed of scanning.
                                      Depends on the open file limit of your OS.  If you do 65535 it will do every port
                                      at the same time. Although, your OS may not support this [default: 4500]
    -p, --ports <ports>...            A list of comma separed ports to be scanned. Example: 80,443,8080
    -r, --range <range>               A range of ports with format start-end. Example: 1-1000
        --scan-order <scan-order>     The order of scanning to be performed. The "serial" option will scan ports in
                                      ascending order while the "random" option will scan ports randomly [default:
                                      serial]  [possible values: Serial, Random]
        --scripts <scripts>           Level of scripting required for the run [default: default]  [possible values:
                                      None, Default, Custom]
    -t, --timeout <timeout>           The timeout in milliseconds before a port is assumed to be closed [default: 1500]
        --tries <tries>               The number of tries before a port is assumed to be closed. If set to 0, rustscan
                                      will correct it to 1 [default: 1]
    -u, --ulimit <ulimit>             Automatically ups the ULIMIT with the value you provided

ARGS:
    <command>...    The Script arguments to run. To use the argument -A, end RustScan's args with '-- -A'. Example:
                    'rustscan -T 1500 127.0.0.1 -- -A -sC'. This command adds -Pn -vvv -p $PORTS automatically to
                    nmap. For things like --script '(safe and vuln)' enclose it in quotations marks \"'(safe and
                    vuln)'\"")
